import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import streamlit as st
from datetime import datetime

st.set_page_config(layout="wide")

def format_number(num):
    if isinstance(num, (int, float)):
        return f"{num:,.0f}".replace(",", " ") if not np.isnan(num) else "0"
    return str(num)

st.sidebar.header("–î–æ–ø—É—â–µ–Ω–∏—è")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
price_per_m2 = st.sidebar.number_input("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º¬≤ (—Ä—É–±.)", 
                                     min_value=15000, 
                                     max_value=45000, 
                                     value=25000,
                                     step=1000,
                                     format="%d")

sales_m2 = st.sidebar.number_input("–ü—Ä–æ–¥–∞–∂–∏ (–º¬≤/–º–µ—Å.)", 
                                 min_value=10, 
                                 max_value=2000, 
                                 value=50,
                                 step=10,
                                 format="%d")

growth_rate = st.sidebar.slider("–ú–µ—Å—è—á–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ (%)", 
                              0.0, 30.0, 10.0, step=1.0) / 100

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
st.sidebar.subheader("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã")
material_percent = st.sidebar.number_input("–°—ã—Ä—å—ë (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 
                                         min_value=0, 
                                         max_value=100, 
                                         value=30,
                                         format="%d",
                                         step=1)

labor_percent = st.sidebar.number_input("–ü—Ä–æ–∏–∑–≤–æ–¥. –ø–µ—Ä—Å–æ–Ω–∞–ª (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 
                                      min_value=0, 
                                      max_value=30, 
                                      value=10,
                                      format="%d",
                                      step=1)

total_variable_percent = material_percent + labor_percent
progress_value = min(total_variable_percent / 100, 1.0)
color = "red" if total_variable_percent > 100 else "green"
warning = " ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ 100%" if total_variable_percent > 100 else ""

st.sidebar.progress(progress_value)
st.sidebar.markdown(
    f"<p style='font-size:14px; color:{color}; margin-top: -15px;'>"
    f"–ò—Ç–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: <b>{total_variable_percent}%</b> –æ—Ç –≤—ã—Ä—É—á–∫–∏"
    f"{warning}</p>", 
    unsafe_allow_html=True
)

# –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
st.sidebar.subheader("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (—Ä—É–±./–º–µ—Å.)")
rent_warehouse = st.sidebar.number_input("–ê—Ä–µ–Ω–¥–∞ —Å–∫–ª–∞–¥–∞", 1000, 1000000, 300000, step=10000)
rent_office = st.sidebar.number_input("–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞", 1000, 1000000, 50000, step=10000)
utilities = st.sidebar.number_input("–ö–æ–º–º—É–Ω–∞–ª–∫–∞", 1000, 1000000, 50000, step=1000)
salary_management = st.sidebar.number_input("–ó–ü –ê–£–ü", 1000, 1000000, 300000, step=50000)
salary_other = st.sidebar.number_input("–ó–ü –ø—Ä–æ—á–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", 1000, 1000000, 300000, step=50000)
office_supplies = st.sidebar.number_input("–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è, —Ö–æ–∑—Ä–∞—Å—Ö–æ–¥—ã", 1000, 1000000, 10000, step=1000)
communication = st.sidebar.number_input("–°–≤—è–∑—å", 1000, 1000000, 15000, step=1000)
bank_charges = st.sidebar.number_input("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", 1000, 1000000, 10000, step=1000)

# –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
salary_tax_percent = st.sidebar.slider("–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ª–æ–≥–∏ (%)", 0, 50, 30) / 100
delivery_percent = st.sidebar.slider("–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (%)", 0, 10, 5) / 100

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
initial_investment = st.sidebar.number_input("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (—Ä—É–±.)", 
                                           value=2_000_000,
                                           format="%d",
                                           step=500_000)

loan_amount = st.sidebar.number_input("–ö—Ä–µ–¥–∏—Ç (—Ä—É–±.)", 
                                     value=2_000_000,
                                     format="%d",
                                     step=500_000)

interest_rate = st.sidebar.slider("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞ (%)", 10.0, 40.0, 25.0) / 100
tax_rate = st.sidebar.slider("–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (%)", 6.0, 20.0, 20.0) / 100
months = st.sidebar.number_input("–°—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü–µ–≤)", 
                                value=24, 
                                min_value=6, 
                                max_value=60)

def generate_financials(price=price_per_m2, sales=sales_m2, growth=growth_rate):
    df = pd.DataFrame(index=pd.date_range(start='2024-01-01', periods=months, freq='M'))
    
    df['–ü–µ—Ä–∏–æ–¥'] = df.index.strftime('%b %y')
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–∞–∂ —Å —É—á–µ—Ç–æ–º —Ä–æ—Å—Ç–∞
    current_sales = sales
    sales_growth = []
    for _ in range(months):
        sales_growth.append(current_sales)
        current_sales *= (1 + growth)
    
    df['–ü—Ä–æ–¥–∞–∂–∏ –º¬≤'] = np.floor(sales_growth)
    df['–í—ã—Ä—É—á–∫–∞'] = df['–ü—Ä–æ–¥–∞–∂–∏ –º¬≤'] * price
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
    df['–°—ã—Ä—å—ë'] = df['–í—ã—Ä—É—á–∫–∞'] * (material_percent / 100)
    df['–ü—Ä–æ–∏–∑–≤. –ø–µ—Ä—Å–æ–Ω–∞–ª'] = df['–í—ã—Ä—É—á–∫–∞'] * (labor_percent / 100)
    df['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã'] = df['–°—ã—Ä—å—ë'] + df['–ü—Ä–æ–∏–∑–≤. –ø–µ—Ä—Å–æ–Ω–∞–ª']
    
    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
    df['–ê—Ä–µ–Ω–¥–∞ —Å–∫–ª–∞–¥–∞'] = rent_warehouse
    df['–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞'] = rent_office
    df['–ö–æ–º–º—É–Ω–∞–ª–∫–∞'] = utilities
    df['–ó–ü –ê–£–ü'] = salary_management
    df['–ó–ü –ø—Ä–æ—á–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞'] = salary_other
    df['–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è'] = office_supplies
    df['–°–≤—è–∑—å'] = communication
    df['–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'] = bank_charges
    
    df['–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ª–æ–≥–∏'] = (df['–ó–ü –ê–£–ü'] + df['–ó–ü –ø—Ä–æ—á–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞']) * salary_tax_percent
    df['–î–æ—Å—Ç–∞–≤–∫–∞'] = df['–°—ã—Ä—å—ë'] * delivery_percent
    
    df['–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã'] = df[[
        '–ê—Ä–µ–Ω–¥–∞ —Å–∫–ª–∞–¥–∞', '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞', '–ö–æ–º–º—É–Ω–∞–ª–∫–∞',
        '–ó–ü –ê–£–ü', '–ó–ü –ø—Ä–æ—á–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è',
        '–°–≤—è–∑—å', '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ª–æ–≥–∏', '–î–æ—Å—Ç–∞–≤–∫–∞'
    ]].sum(axis=1)
    
    df['–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è'] = initial_investment / 60
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    df['–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å'] = df['–í—ã—Ä—É—á–∫–∞'] - df['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã'] - df['–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã']
    df['EBITDA'] = df['–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å'] - df['–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è']
    
    # –†–∞—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞
    monthly_rate = interest_rate / 12
    loan_payments = npf.pmt(monthly_rate, months, -loan_amount)
    principal = npf.ppmt(monthly_rate, np.arange(1, months+1), months, -loan_amount)
    interest = npf.ipmt(monthly_rate, np.arange(1, months+1), months, -loan_amount)
    
    df['–ü—Ä–æ—Ü–µ–Ω—Ç—ã'] = interest
    df['–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞'] = principal
    df['–ü—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–∞'] = df['EBITDA'] - df['–ü—Ä–æ—Ü–µ–Ω—Ç—ã']
    df['–ù–∞–ª–æ–≥'] = df['–ü—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–∞'].apply(lambda x: x * tax_rate if x > 0 else 0)
    df['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'] = df['–ü—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–∞'] - df['–ù–∞–ª–æ–≥']
    
    # –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
    df['–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫'] = df['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'] + df['–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è']
    df['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫'] = -initial_investment / months
    df['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫'] = 0
    df.loc[df.index[0], '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫'] = loan_amount  
    # –ü–æ–ª–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –≤ –ø–µ—Ä–≤–æ–º –º–µ—Å—è—Ü–µ
    df['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫'] -= (df['–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞'] + df['–ü—Ä–æ—Ü–µ–Ω—Ç—ã'])    
    return df

df = generate_financials()

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
st.title("üè† –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–º–æ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤")

col1, col2, col3 = st.columns(3)
col1.metric("–°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{df['–í—ã—Ä—É—á–∫–∞'].sum()/1e6:.1f} –º–ª–Ω —Ä—É–±.")
col2.metric("–û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", f"{df['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'].sum()/1e6:.1f} –º–ª–Ω —Ä—É–±.")

cash_flows = [-initial_investment] + df['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'].tolist()
npv_value = npf.npv(interest_rate/12, cash_flows)
col3.metric("NPV –ø—Ä–æ–µ–∫—Ç–∞", f"{npv_value/1e6:.1f} –º–ª–Ω —Ä—É–±.")

fig1 = px.line(
    df, 
    x='–ü–µ—Ä–∏–æ–¥',
    y=['–í—ã—Ä—É—á–∫–∞', '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'],
    title="üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏",
    labels={'value': '–†—É–±–ª–∏', 'variable': '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'}
)
st.plotly_chart(fig1, use_container_width=True)

fig2 = px.area(
    df, 
    x='–ü–µ—Ä–∏–æ–¥',
    y=['–°—ã—Ä—å—ë', '–ü—Ä–æ–∏–∑–≤. –ø–µ—Ä—Å–æ–Ω–∞–ª', '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã', '–ü—Ä–æ—Ü–µ–Ω—Ç—ã'],
    title="üìâ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç",
    labels={'value': '–†—É–±–ª–∏', 'variable': '–¢–∏–ø –∑–∞—Ç—Ä–∞—Ç'}
)
st.plotly_chart(fig2, use_container_width=True)

st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
display_df = df[['–ü–µ—Ä–∏–æ–¥', '–ü—Ä–æ–¥–∞–∂–∏ –º¬≤', '–í—ã—Ä—É—á–∫–∞', '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 
                '–°—ã—Ä—å—ë', '–ü—Ä–æ–∏–∑–≤. –ø–µ—Ä—Å–æ–Ω–∞–ª', '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã',
                '–ü—Ä–æ—Ü–µ–Ω—Ç—ã', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫']].copy()

numeric_cols = display_df.select_dtypes(include=[np.number]).columns
format_dict = {col: lambda x: format_number(x) for col in numeric_cols}

st.dataframe(
    display_df.style.format(format_dict),
    height=400,
    use_container_width=True
)

# –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
st.sidebar.header("üîç –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
price_sens = st.sidebar.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –º¬≤ (%)", -20, 20, 0) / 100
sales_sens = st.sidebar.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ (%)", -30, 30, 0) / 100

if st.sidebar.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"):
    new_price = price_per_m2 * (1 + price_sens)
    new_sales = sales_m2 * (1 + sales_sens)
    
    df_sens = generate_financials(
        price=new_price,
        sales=new_sales,
        growth=growth_rate
    )
    
    st.subheader(f"üìå –°—Ü–µ–Ω–∞—Ä–∏–π: –¶–µ–Ω–∞ {price_sens*100:+.0f}%, –û–±—ä–µ–º {sales_sens*100:+.0f}%")
    
    col1, col2 = st.columns(2)
    col1.metric("–ù–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞", 
               f"{df_sens['–í—ã—Ä—É—á–∫–∞'].sum()/1e6:.1f} –º–ª–Ω —Ä—É–±.",
               f"{(df_sens['–í—ã—Ä—É—á–∫–∞'].sum() - df['–í—ã—Ä—É—á–∫–∞'].sum())/1e6:+.1f} –º–ª–Ω —Ä—É–±.")
    
    col2.metric("–ù–æ–≤–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", 
               f"{df_sens['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'].sum()/1e6:.1f} –º–ª–Ω —Ä—É–±.",
               f"{(df_sens['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'].sum() - df['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'].sum())/1e6:+.1f} –º–ª–Ω —Ä—É–±.")